{"ast":null,"code":"var _jsxFileName = \"D:\\\\development\\\\AthertonReact\\\\ReactFiles\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { getAuth, onAuthStateChanged } from 'firebase/auth';\nimport './firebase.js';\nimport { RenderDashboard } from './dashboard/dashboard.js';\nimport { getUserData } from './database/database.js';\nimport { GoogleLoginButton } from './setup/login.js';\nimport { SettingsForm } from './setup/settings.js';\nimport 'normalize.css';\nimport { getServerIp, getReturnUrl } from './config.js';\nimport { get } from 'firebase/database';\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst auth = getAuth();\nexport default function App(props) {\n  _s();\n  const [isSignedIn, setSignIn] = useState(null);\n  const [user, setUser] = useState(null);\n  const [userData, setUserData] = useState(null);\n  const [userDataFetched, setUserDataFetched] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [settingsDone, setSettingsDone] = useState(false);\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, user => {\n      if (user) {\n        setUser(user);\n        if (!isSignedIn) {\n          setSignIn(true);\n        }\n      } else {\n        setSignIn(false);\n      }\n      setLoading(false);\n    });\n    return () => unsubscribe();\n  }, [isSignedIn]);\n  useEffect(() => {\n    if (isSignedIn && !userDataFetched) {\n      fetchUserData();\n    }\n  }, [isSignedIn, userDataFetched]);\n  const fetchUserData = () => {\n    getUserData().then(data => {\n      if (!(JSON.stringify(userData) === JSON.stringify(data))) {\n        setUserData(data);\n      }\n      setUserDataFetched(true);\n    }).catch(error => {\n      console.error(\"Failed to get user data:\", error);\n    });\n  };\n  const handleSubscription = async () => {\n    // Construct the URL securely\n    const serverUrl = getServerIp();\n    try {\n      // Convert JSON data to URL-encoded data\n      const body = new URLSearchParams();\n      body.append('email', user.email);\n      body.append('user_id', user.uid);\n      body.append('appUrl', getReturnUrl());\n\n      // Make the POST request to the server\n      const response = await fetch(serverUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: body\n      });\n      const session = await response.json();\n\n      // Check if the response was successful\n      if (response.ok) {\n        // Redirect the user to the Stripe session URL\n        window.location.href = session.url;\n      } else {\n        // Log the error - consider also handling/displaying this to the user\n        console.error('Failed to create checkout session:', session);\n      }\n    } catch (error) {\n      // Handle any errors that occurred during the fetch operation\n      console.error('Error fetching the checkout session:', error);\n    }\n  };\n  const checkPayerByEmail = async () => {\n    let email = user.email;\n    let userId = user.uid;\n    if (!email || !userId) {\n      console.log('Email and User ID are required');\n      return;\n    }\n    try {\n      console.log(\"trying\");\n      const url = `https://${getServerIp()}/check-payer-by-email?email=${encodeURIComponent(email)}&user_id=${userId}`;\n      const response = await fetch(url);\n      const data = await response.json();\n      if (response.ok) {\n        if (data.is_paying) {\n          // user is paid\n          userData.paid = \"Yes\";\n          console.log(\"paying user\");\n        } else {\n          console.log(\"user not paying\");\n          handleSubscription();\n          setSettingsDone(false);\n        }\n      } else {\n        console.error(data.error || 'Error occurred while checking payer status');\n      }\n    } catch (error) {\n      console.error('Failed to fetch payer status:', error);\n    }\n  };\n  const handleUserPaymentStatus = async () => {\n    console.log(\"handle payment status\");\n    if (!userData) {\n      console.log('User data is not available yet.');\n      return;\n    }\n    const lastCheckedTime = localStorage.getItem('lastPaymentCheckTime');\n    const currentTime = new Date().getTime();\n\n    // Check if it has been less than an hour since the last check\n    if ('paid' in userData) {\n      if (userData.setup == \"Yes\" && userData.paid == \"Yes\") {\n        if (lastCheckedTime && currentTime - lastCheckedTime < 1) {\n          // Fixed time comparison\n          console.log('Checked less than an hour ago.');\n          return;\n        }\n      }\n    }\n\n    // Update the last checked time\n    localStorage.setItem('lastPaymentCheckTime', currentTime);\n    await checkPayerByEmail(); // Always check payer status\n    await fetchUserData(); // Always refresh user data\n\n    // Check updated payment status and take action\n    if (userData.paid === \"No\") {\n      checkPayerByEmail();\n    }\n  };\n\n  // Add this effect to check payment status whenever user data is fetched or updated\n  useEffect(() => {\n    if (isSignedIn && userDataFetched && userData) {\n      if (!userData.setup) {\n        // bypass\n      } else if (userData.setup == \"Yes\" && userData.paid == \"Yes\") {\n        handleUserPaymentStatus();\n      }\n    }\n  }, [userData]); // React on userData updates\n\n  if (userData) {\n    if ('paid' in userData) {\n      if (userData.setup == \"Yes\" && userData.paid == \"No\") {\n        console.log(\"handle payment status\");\n        handleUserPaymentStatus();\n        return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n      }\n    }\n  }\n  const finishedInitSettings = () => {\n    handleSubscription();\n    setSettingsDone(true);\n  };\n  if (settingsDone) {\n    return;\n  }\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 12\n    }, this);\n  }\n  if (isSignedIn) {\n    if (userData && userData[\"setup\"] === \"No\" && userDataFetched) {\n      return /*#__PURE__*/_jsxDEV(SettingsForm, {\n        changeUserDataState: setUserData,\n        userData: userData,\n        finishedInitSettings: finishedInitSettings\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 14\n      }, this);\n    } else if (userData && userData[\"setup\"] === \"Yes\" && userDataFetched) {\n      return /*#__PURE__*/_jsxDEV(RenderDashboard, {\n        userData: userData,\n        changeUserDataState: setUserData,\n        user: user,\n        route: props.route\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 14\n      }, this);\n    }\n  } else {\n    return /*#__PURE__*/_jsxDEV(GoogleLoginButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 12\n    }, this);\n  }\n}\n_s(App, \"mFoorCXiOaUDJ3dloBXtCRE8Mp0=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","getAuth","onAuthStateChanged","RenderDashboard","getUserData","GoogleLoginButton","SettingsForm","getServerIp","getReturnUrl","get","Fragment","_Fragment","jsxDEV","_jsxDEV","auth","App","props","_s","isSignedIn","setSignIn","user","setUser","userData","setUserData","userDataFetched","setUserDataFetched","loading","setLoading","settingsDone","setSettingsDone","unsubscribe","fetchUserData","then","data","JSON","stringify","catch","error","console","handleSubscription","serverUrl","body","URLSearchParams","append","email","uid","response","fetch","method","headers","session","json","ok","window","location","href","url","checkPayerByEmail","userId","log","encodeURIComponent","is_paying","paid","handleUserPaymentStatus","lastCheckedTime","localStorage","getItem","currentTime","Date","getTime","setup","setItem","finishedInitSettings","children","fileName","_jsxFileName","lineNumber","columnNumber","changeUserDataState","route","_c","$RefreshReg$"],"sources":["D:/development/AthertonReact/ReactFiles/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { getAuth, onAuthStateChanged } from 'firebase/auth';\r\nimport './firebase.js';\r\nimport { RenderDashboard } from './dashboard/dashboard.js';\r\nimport { getUserData } from './database/database.js';\r\nimport { GoogleLoginButton } from './setup/login.js';\r\nimport { SettingsForm } from './setup/settings.js';\r\nimport 'normalize.css';\r\nimport { getServerIp, getReturnUrl } from './config.js';\r\nimport { get } from 'firebase/database';\r\n\r\nconst auth = getAuth();\r\nexport default function App(props) {\r\n  const [isSignedIn, setSignIn] = useState(null);\r\n  const [user, setUser] = useState(null); \r\n  const [userData, setUserData] = useState(null);\r\n  const [userDataFetched, setUserDataFetched] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [settingsDone, setSettingsDone] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, user => {\r\n      if (user) {\r\n        setUser(user); \r\n        if (!isSignedIn) { \r\n          setSignIn(true);\r\n        }\r\n      } else {\r\n        setSignIn(false);\r\n      }\r\n      setLoading(false); \r\n    });\r\n\r\n    return () => unsubscribe(); \r\n  }, [isSignedIn]);\r\n\r\n  useEffect(() => {\r\n    if (isSignedIn && !userDataFetched) {\r\n      fetchUserData();\r\n    }\r\n  }, [isSignedIn, userDataFetched]);\r\n\r\n  const fetchUserData = () => {\r\n    getUserData().then(data => {\r\n      if (!(JSON.stringify(userData) === JSON.stringify(data))) {\r\n        setUserData(data);\r\n      }\r\n      setUserDataFetched(true);\r\n    }).catch(error => {\r\n      console.error(\"Failed to get user data:\", error);\r\n    });\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const handleSubscription = async () => {\r\n    // Construct the URL securely\r\n    const serverUrl = getServerIp();\r\n    \r\n    try {\r\n        // Convert JSON data to URL-encoded data\r\n        const body = new URLSearchParams();\r\n        body.append('email', user.email);\r\n        body.append('user_id', user.uid);\r\n        body.append('appUrl', getReturnUrl());\r\n\r\n        // Make the POST request to the server\r\n        const response = await fetch(serverUrl, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: body\r\n        });\r\n\r\n        const session = await response.json();\r\n\r\n        // Check if the response was successful\r\n        if (response.ok) {\r\n            // Redirect the user to the Stripe session URL\r\n            window.location.href = session.url;\r\n        } else {\r\n            // Log the error - consider also handling/displaying this to the user\r\n            console.error('Failed to create checkout session:', session);\r\n        }\r\n    } catch (error) {\r\n        // Handle any errors that occurred during the fetch operation\r\n        console.error('Error fetching the checkout session:', error);\r\n    }\r\n};\r\n\r\n\r\n  \r\n  \r\n  const checkPayerByEmail = async () => {\r\n  \r\n    let email = user.email\r\n    let userId = user.uid\r\n  \r\n    if (!email || !userId) {\r\n      console.log('Email and User ID are required');\r\n      return; \r\n    }\r\n  \r\n    try {\r\n      console.log(\"trying\")\r\n\r\n      const url = `https://${getServerIp()}/check-payer-by-email?email=${encodeURIComponent(email)}&user_id=${userId}`;\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n  \r\n      \r\n      if (response.ok) {\r\n        if (data.is_paying) {\r\n          // user is paid\r\n          userData.paid = \"Yes\"\r\n          console.log(\"paying user\")\r\n        } else {\r\n          console.log(\"user not paying\")\r\n          handleSubscription()\r\n          setSettingsDone(false)\r\n        }\r\n      } else {\r\n        console.error(data.error || 'Error occurred while checking payer status');\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to fetch payer status:', error);\r\n    }\r\n  };\r\n\r\n \r\n  \r\n\r\n  \r\n  const handleUserPaymentStatus = async () => {\r\n    console.log(\"handle payment status\")\r\n    if (!userData) {\r\n      console.log('User data is not available yet.');\r\n      return;\r\n    }\r\n  \r\n    const lastCheckedTime = localStorage.getItem('lastPaymentCheckTime');\r\n    const currentTime = new Date().getTime();\r\n  \r\n    // Check if it has been less than an hour since the last check\r\n    if ('paid' in userData) {\r\n      if (userData.setup == \"Yes\" && userData.paid == \"Yes\") {\r\n        if (lastCheckedTime && (currentTime - lastCheckedTime < 1)) {  // Fixed time comparison\r\n          console.log('Checked less than an hour ago.');\r\n          return;\r\n        }\r\n\r\n\r\n      \r\n    }\r\n  }\r\n    \r\n  \r\n    // Update the last checked time\r\n    localStorage.setItem('lastPaymentCheckTime', currentTime);\r\n  \r\n    await checkPayerByEmail();  // Always check payer status\r\n    await fetchUserData();  // Always refresh user data\r\n  \r\n    // Check updated payment status and take action\r\n    if (userData.paid === \"No\") {\r\n      checkPayerByEmail();\r\n    }\r\n  };\r\n  \r\n  // Add this effect to check payment status whenever user data is fetched or updated\r\n  useEffect(() => {\r\n    if (isSignedIn && userDataFetched && userData) {\r\n      if (!userData.setup){\r\n        // bypass\r\n      } else if (userData.setup == \"Yes\" && userData.paid == \"Yes\"){\r\n        handleUserPaymentStatus();\r\n      }\r\n    \r\n    }\r\n  }, [userData]);  // React on userData updates\r\n  \r\n\r\n  if (userData) {\r\n      if ('paid' in userData) {\r\n        if (userData.setup == \"Yes\" && userData.paid == \"No\") {\r\n        console.log(\"handle payment status\")\r\n        handleUserPaymentStatus();\r\n\r\n\r\n        return <></>\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\nconst finishedInitSettings = () => {\r\n  handleSubscription()\r\n  setSettingsDone(true)\r\n}\r\n\r\n\r\nif (settingsDone){\r\n  return;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  if (isSignedIn) {\r\n    if (userData && userData[\"setup\"] === \"No\" && userDataFetched) {\r\n      return <SettingsForm changeUserDataState={setUserData} userData={userData} finishedInitSettings={finishedInitSettings}/>;\r\n    } else if (userData && userData[\"setup\"] === \"Yes\" && userDataFetched) {\r\n      return <RenderDashboard userData={userData} changeUserDataState={setUserData} user={user} route={props.route}/>;\r\n    }\r\n  } else {\r\n    return <GoogleLoginButton />;\r\n  }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}