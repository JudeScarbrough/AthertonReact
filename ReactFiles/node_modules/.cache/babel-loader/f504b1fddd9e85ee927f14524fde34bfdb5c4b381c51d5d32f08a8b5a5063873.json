{"ast":null,"code":"import{useState,useEffect}from'react';import{getAuth,onAuthStateChanged}from'firebase/auth';import'./firebase.js';import{RenderDashboard}from'./dashboard/dashboard.js';import{getUserData}from'./database/database.js';import{GoogleLoginButton}from'./setup/login.js';import{SettingsForm}from'./setup/settings.js';import{jsx as _jsx}from\"react/jsx-runtime\";const auth=getAuth();export default function App(){const[isSignedIn,setSignIn]=useState(null);const[userData,setUserData]=useState(null);const[userDataFetched,setUserDataFetched]=useState(false);const[loading,setLoading]=useState(true);// New state for loading\nuseEffect(()=>{const unsubscribe=onAuthStateChanged(auth,user=>{if(user){if(!isSignedIn){setSignIn(true);}}else{setSignIn(false);}setLoading(false);// Set loading to false once we have a response\n});return()=>unsubscribe();// Cleanup subscription\n},[isSignedIn]);const changeUserDataState=newState=>{setUserData(newState);};if(loading){return/*#__PURE__*/_jsx(\"div\",{});// Or any other loading indicator\n}if(isSignedIn){if(userDataFetched===false){getUserData().then(data=>{if(!(JSON.stringify(userData)===JSON.stringify(data))){setUserData(data);}setUserDataFetched(true);}).catch(error=>{console.error(\"Failed to get user data:\",error);});}if(userData&&userData[\"setup\"]===\"No\"&&userDataFetched){return/*#__PURE__*/_jsx(SettingsForm,{changeUserDataState:changeUserDataState,userData:userData});}else if(userData&&userData[\"setup\"]===\"Yes\"){return/*#__PURE__*/_jsx(RenderDashboard,{userData:userData,changeUserDataState:changeUserDataState});}}else{return/*#__PURE__*/_jsx(GoogleLoginButton,{});}}","map":{"version":3,"names":["useState","useEffect","getAuth","onAuthStateChanged","RenderDashboard","getUserData","GoogleLoginButton","SettingsForm","jsx","_jsx","auth","App","isSignedIn","setSignIn","userData","setUserData","userDataFetched","setUserDataFetched","loading","setLoading","unsubscribe","user","changeUserDataState","newState","then","data","JSON","stringify","catch","error","console"],"sources":["/Users/jscarbrough/Desktop/AthertonReact/ReactFiles/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { getAuth, onAuthStateChanged } from 'firebase/auth';\nimport './firebase.js';\nimport { RenderDashboard } from './dashboard/dashboard.js';\nimport { getUserData } from './database/database.js';\nimport { GoogleLoginButton } from './setup/login.js';\nimport { SettingsForm } from './setup/settings.js';\n\nconst auth = getAuth();\nexport default function App() {\n  const [isSignedIn, setSignIn] = useState(null);\n  const [userData, setUserData] = useState(null);\n  const [userDataFetched, setUserDataFetched] = useState(false);\n  const [loading, setLoading] = useState(true); // New state for loading\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, user => {\n      if (user) {\n        if (!isSignedIn) { \n          setSignIn(true);\n        }\n      } else {\n        setSignIn(false);\n      }\n      setLoading(false); // Set loading to false once we have a response\n    });\n\n    return () => unsubscribe(); // Cleanup subscription\n  }, [isSignedIn]);\n\n  const changeUserDataState = (newState) => {\n    setUserData(newState);\n  };\n\n  if (loading) {\n    return <div></div>; // Or any other loading indicator\n  }\n\n  if (isSignedIn) {\n    if (userDataFetched === false) {\n      getUserData().then(data => {\n        if (!(JSON.stringify(userData) === JSON.stringify(data))) {\n          setUserData(data);\n        }\n        setUserDataFetched(true);\n      }).catch(error => {console.error(\"Failed to get user data:\", error)});\n    }\n\n    if (userData && userData[\"setup\"] === \"No\" && userDataFetched) {\n      return <SettingsForm changeUserDataState={changeUserDataState} userData={userData}></SettingsForm>;\n    } else if (userData && userData[\"setup\"] === \"Yes\") {\n      return <RenderDashboard userData={userData} changeUserDataState={changeUserDataState}></RenderDashboard>;\n    }\n  } else {\n    return <GoogleLoginButton></GoogleLoginButton>;\n  }\n}\n\n\n\n\n\n"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC3C,OAASC,OAAO,CAAEC,kBAAkB,KAAQ,eAAe,CAC3D,MAAO,eAAe,CACtB,OAASC,eAAe,KAAQ,0BAA0B,CAC1D,OAASC,WAAW,KAAQ,wBAAwB,CACpD,OAASC,iBAAiB,KAAQ,kBAAkB,CACpD,OAASC,YAAY,KAAQ,qBAAqB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEnD,KAAM,CAAAC,IAAI,CAAGR,OAAO,CAAC,CAAC,CACtB,cAAe,SAAS,CAAAS,GAAGA,CAAA,CAAG,CAC5B,KAAM,CAACC,UAAU,CAAEC,SAAS,CAAC,CAAGb,QAAQ,CAAC,IAAI,CAAC,CAC9C,KAAM,CAACc,QAAQ,CAAEC,WAAW,CAAC,CAAGf,QAAQ,CAAC,IAAI,CAAC,CAC9C,KAAM,CAACgB,eAAe,CAAEC,kBAAkB,CAAC,CAAGjB,QAAQ,CAAC,KAAK,CAAC,CAC7D,KAAM,CAACkB,OAAO,CAAEC,UAAU,CAAC,CAAGnB,QAAQ,CAAC,IAAI,CAAC,CAAE;AAE9CC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAmB,WAAW,CAAGjB,kBAAkB,CAACO,IAAI,CAAEW,IAAI,EAAI,CACnD,GAAIA,IAAI,CAAE,CACR,GAAI,CAACT,UAAU,CAAE,CACfC,SAAS,CAAC,IAAI,CAAC,CACjB,CACF,CAAC,IAAM,CACLA,SAAS,CAAC,KAAK,CAAC,CAClB,CACAM,UAAU,CAAC,KAAK,CAAC,CAAE;AACrB,CAAC,CAAC,CAEF,MAAO,IAAMC,WAAW,CAAC,CAAC,CAAE;AAC9B,CAAC,CAAE,CAACR,UAAU,CAAC,CAAC,CAEhB,KAAM,CAAAU,mBAAmB,CAAIC,QAAQ,EAAK,CACxCR,WAAW,CAACQ,QAAQ,CAAC,CACvB,CAAC,CAED,GAAIL,OAAO,CAAE,CACX,mBAAOT,IAAA,SAAU,CAAC,CAAE;AACtB,CAEA,GAAIG,UAAU,CAAE,CACd,GAAII,eAAe,GAAK,KAAK,CAAE,CAC7BX,WAAW,CAAC,CAAC,CAACmB,IAAI,CAACC,IAAI,EAAI,CACzB,GAAI,EAAEC,IAAI,CAACC,SAAS,CAACb,QAAQ,CAAC,GAAKY,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC,CAAC,CAAE,CACxDV,WAAW,CAACU,IAAI,CAAC,CACnB,CACAR,kBAAkB,CAAC,IAAI,CAAC,CAC1B,CAAC,CAAC,CAACW,KAAK,CAACC,KAAK,EAAI,CAACC,OAAO,CAACD,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,EAAC,CAAC,CACvE,CAEA,GAAIf,QAAQ,EAAIA,QAAQ,CAAC,OAAO,CAAC,GAAK,IAAI,EAAIE,eAAe,CAAE,CAC7D,mBAAOP,IAAA,CAACF,YAAY,EAACe,mBAAmB,CAAEA,mBAAoB,CAACR,QAAQ,CAAEA,QAAS,CAAe,CAAC,CACpG,CAAC,IAAM,IAAIA,QAAQ,EAAIA,QAAQ,CAAC,OAAO,CAAC,GAAK,KAAK,CAAE,CAClD,mBAAOL,IAAA,CAACL,eAAe,EAACU,QAAQ,CAAEA,QAAS,CAACQ,mBAAmB,CAAEA,mBAAoB,CAAkB,CAAC,CAC1G,CACF,CAAC,IAAM,CACL,mBAAOb,IAAA,CAACH,iBAAiB,GAAoB,CAAC,CAChD,CACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}