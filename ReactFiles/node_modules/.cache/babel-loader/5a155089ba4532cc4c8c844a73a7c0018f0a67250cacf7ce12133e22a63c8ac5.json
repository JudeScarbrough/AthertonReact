{"ast":null,"code":"var _jsxFileName = \"/Users/jscarbrough/Desktop/AthertonReact/ReactFiles/src/setup/login.js\";\n// Import React and necessary Firebase functions\nimport React from 'react';\nimport { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from 'firebase/auth';\nimport googleSigninImage from '../images/google-signin-button.png';\nimport mainLogo from '../images/AthertonLogoblack-01.png';\nimport '../firebase.js';\nimport '../cssFiles/login.css';\n\n// Component for Google login\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function GoogleLoginButton() {\n  // Function to handle the login process\n  const handleLogin = () => {\n    // Initialize Firebase authentication and provider\n    const auth = getAuth();\n    const provider = new GoogleAuthProvider();\n\n    // Sign in with a popup\n    signInWithPopup(auth, provider).then(result => {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      const credential = GoogleAuthProvider.credentialFromResult(result);\n      const token = credential.accessToken;\n      // The signed-in user info.\n      const user = result.user;\n      // You can store the user details in your app's state or perform other actions here\n      console.log(user);\n    }).catch(error => {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      // The email of the user's account used.\n      const email = error.email;\n      // The AuthCredential type that was used.\n      const credential = GoogleAuthProvider.credentialFromError(error);\n      // You can alert the user or log these errors as needed\n      console.error(\"Error signing in with Google\", errorCode, errorMessage);\n    });\n  };\n\n  // Render a button that calls handleLogin when clicked\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"mainDiv\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: mainLogo,\n      id: \"mainLogo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"loginDiv\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Sign In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: googleSigninImage,\n        onClick: handleLogin,\n        id: \"googleLogin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_c = GoogleLoginButton;\n;\nexport function LogInPage() {}\n_c2 = LogInPage;\nvar _c, _c2;\n$RefreshReg$(_c, \"GoogleLoginButton\");\n$RefreshReg$(_c2, \"LogInPage\");","map":{"version":3,"names":["React","initializeApp","getAuth","signInWithPopup","GoogleAuthProvider","googleSigninImage","mainLogo","jsxDEV","_jsxDEV","GoogleLoginButton","handleLogin","auth","provider","then","result","credential","credentialFromResult","token","accessToken","user","console","log","catch","error","errorCode","code","errorMessage","message","email","credentialFromError","id","children","src","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","LogInPage","_c2","$RefreshReg$"],"sources":["/Users/jscarbrough/Desktop/AthertonReact/ReactFiles/src/setup/login.js"],"sourcesContent":["// Import React and necessary Firebase functions\nimport React from 'react';\nimport { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from 'firebase/auth';\nimport googleSigninImage from '../images/google-signin-button.png'\nimport mainLogo from '../images/AthertonLogoblack-01.png'\nimport '../firebase.js';\nimport '../cssFiles/login.css'\n\n// Component for Google login\nexport function GoogleLoginButton(){\n  // Function to handle the login process\n  const handleLogin = () => {\n    // Initialize Firebase authentication and provider\n    const auth = getAuth();\n    const provider = new GoogleAuthProvider();\n\n    // Sign in with a popup\n    signInWithPopup(auth, provider)\n      .then((result) => {\n        // This gives you a Google Access Token. You can use it to access the Google API.\n        const credential = GoogleAuthProvider.credentialFromResult(result);\n        const token = credential.accessToken;\n        // The signed-in user info.\n        const user = result.user;\n        // You can store the user details in your app's state or perform other actions here\n        console.log(user);\n      })\n      .catch((error) => {\n        // Handle Errors here.\n        const errorCode = error.code;\n        const errorMessage = error.message;\n        // The email of the user's account used.\n        const email = error.email;\n        // The AuthCredential type that was used.\n        const credential = GoogleAuthProvider.credentialFromError(error);\n        // You can alert the user or log these errors as needed\n        console.error(\"Error signing in with Google\", errorCode, errorMessage);\n      });\n  };\n\n  // Render a button that calls handleLogin when clicked\n  return (\n    <div id=\"mainDiv\">\n\n      <img src={mainLogo} id=\"mainLogo\"/>\n      <div id=\"loginDiv\">\n        <h1>Sign In</h1>\n        <img src={googleSigninImage} onClick={handleLogin} id=\"googleLogin\"/>\n      </div>\n      \n    </div>\n  )\n  \n  \n};\n\n\n\n\n\n\nexport function LogInPage(){\n\n}"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,QAAQ,cAAc;AAC5C,SAASC,OAAO,EAAEC,eAAe,EAAEC,kBAAkB,QAAQ,eAAe;AAC5E,OAAOC,iBAAiB,MAAM,oCAAoC;AAClE,OAAOC,QAAQ,MAAM,oCAAoC;AACzD,OAAO,gBAAgB;AACvB,OAAO,uBAAuB;;AAE9B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,SAASC,iBAAiBA,CAAA,EAAE;EACjC;EACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxB;IACA,MAAMC,IAAI,GAAGT,OAAO,CAAC,CAAC;IACtB,MAAMU,QAAQ,GAAG,IAAIR,kBAAkB,CAAC,CAAC;;IAEzC;IACAD,eAAe,CAACQ,IAAI,EAAEC,QAAQ,CAAC,CAC5BC,IAAI,CAAEC,MAAM,IAAK;MAChB;MACA,MAAMC,UAAU,GAAGX,kBAAkB,CAACY,oBAAoB,CAACF,MAAM,CAAC;MAClE,MAAMG,KAAK,GAAGF,UAAU,CAACG,WAAW;MACpC;MACA,MAAMC,IAAI,GAAGL,MAAM,CAACK,IAAI;MACxB;MACAC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACnB,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAK,IAAK;MAChB;MACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,IAAI;MAC5B,MAAMC,YAAY,GAAGH,KAAK,CAACI,OAAO;MAClC;MACA,MAAMC,KAAK,GAAGL,KAAK,CAACK,KAAK;MACzB;MACA,MAAMb,UAAU,GAAGX,kBAAkB,CAACyB,mBAAmB,CAACN,KAAK,CAAC;MAChE;MACAH,OAAO,CAACG,KAAK,CAAC,8BAA8B,EAAEC,SAAS,EAAEE,YAAY,CAAC;IACxE,CAAC,CAAC;EACN,CAAC;;EAED;EACA,oBACElB,OAAA;IAAKsB,EAAE,EAAC,SAAS;IAAAC,QAAA,gBAEfvB,OAAA;MAAKwB,GAAG,EAAE1B,QAAS;MAACwB,EAAE,EAAC;IAAU;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACnC5B,OAAA;MAAKsB,EAAE,EAAC,UAAU;MAAAC,QAAA,gBAChBvB,OAAA;QAAAuB,QAAA,EAAI;MAAO;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChB5B,OAAA;QAAKwB,GAAG,EAAE3B,iBAAkB;QAACgC,OAAO,EAAE3B,WAAY;QAACoB,EAAE,EAAC;MAAa;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEH,CAAC;AAIV;AAACE,EAAA,GA7Ce7B,iBAAiB;AA6ChC;AAOD,OAAO,SAAS8B,SAASA,CAAA,EAAE,CAE3B;AAACC,GAAA,GAFeD,SAAS;AAAA,IAAAD,EAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAH,EAAA;AAAAG,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}