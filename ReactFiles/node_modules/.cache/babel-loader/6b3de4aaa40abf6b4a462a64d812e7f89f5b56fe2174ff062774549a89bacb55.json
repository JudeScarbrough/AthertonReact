{"ast":null,"code":"// Import React and necessary Firebase functions\nimport React from'react';import{initializeApp}from'firebase/app';import{getAuth,signInWithPopup,GoogleAuthProvider}from'firebase/auth';import googleSigninImage from'../images/google-signin-button.png';import mainLogo from'../images/AthertonLogoblack-01.png';import'../firebase.js';import'../cssFiles/login.css';// Component for Google login\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export function GoogleLoginButton(){// Function to handle the login process\nconst handleLogin=()=>{// Initialize Firebase authentication and provider\nconst auth=getAuth();const provider=new GoogleAuthProvider();// Sign in with a popup\nsignInWithPopup(auth,provider).then(result=>{// This gives you a Google Access Token. You can use it to access the Google API.\nconst credential=GoogleAuthProvider.credentialFromResult(result);const token=credential.accessToken;// The signed-in user info.\nconst user=result.user;// You can store the user details in your app's state or perform other actions here\nconsole.log(user);}).catch(error=>{// Handle Errors here.\nconst errorCode=error.code;const errorMessage=error.message;// The email of the user's account used.\nconst email=error.email;// The AuthCredential type that was used.\nconst credential=GoogleAuthProvider.credentialFromError(error);// You can alert the user or log these errors as needed\nconsole.error(\"Error signing in with Google\",errorCode,errorMessage);});};// Render a button that calls handleLogin when clicked\nreturn/*#__PURE__*/_jsxs(\"div\",{id:\"mainDiv\",children:[/*#__PURE__*/_jsx(\"img\",{src:mainLogo,id:\"mainLogo\"}),/*#__PURE__*/_jsxs(\"div\",{id:\"loginDiv\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Sign In\"}),/*#__PURE__*/_jsx(\"img\",{src:googleSigninImage,onClick:handleLogin,id:\"googleLogin\"})]})]});};export function LogInPage(){}","map":{"version":3,"names":["React","initializeApp","getAuth","signInWithPopup","GoogleAuthProvider","googleSigninImage","mainLogo","jsx","_jsx","jsxs","_jsxs","GoogleLoginButton","handleLogin","auth","provider","then","result","credential","credentialFromResult","token","accessToken","user","console","log","catch","error","errorCode","code","errorMessage","message","email","credentialFromError","id","children","src","onClick","LogInPage"],"sources":["/Users/jscarbrough/Desktop/AthertonReact/src/setup/login.js"],"sourcesContent":["// Import React and necessary Firebase functions\nimport React from 'react';\nimport { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from 'firebase/auth';\nimport googleSigninImage from '../images/google-signin-button.png'\nimport mainLogo from '../images/AthertonLogoblack-01.png'\nimport '../firebase.js';\nimport '../cssFiles/login.css'\n\n// Component for Google login\nexport function GoogleLoginButton(){\n  // Function to handle the login process\n  const handleLogin = () => {\n    // Initialize Firebase authentication and provider\n    const auth = getAuth();\n    const provider = new GoogleAuthProvider();\n\n    // Sign in with a popup\n    signInWithPopup(auth, provider)\n      .then((result) => {\n        // This gives you a Google Access Token. You can use it to access the Google API.\n        const credential = GoogleAuthProvider.credentialFromResult(result);\n        const token = credential.accessToken;\n        // The signed-in user info.\n        const user = result.user;\n        // You can store the user details in your app's state or perform other actions here\n        console.log(user);\n      })\n      .catch((error) => {\n        // Handle Errors here.\n        const errorCode = error.code;\n        const errorMessage = error.message;\n        // The email of the user's account used.\n        const email = error.email;\n        // The AuthCredential type that was used.\n        const credential = GoogleAuthProvider.credentialFromError(error);\n        // You can alert the user or log these errors as needed\n        console.error(\"Error signing in with Google\", errorCode, errorMessage);\n      });\n  };\n\n  // Render a button that calls handleLogin when clicked\n  return (\n    <div id=\"mainDiv\">\n\n      <img src={mainLogo} id=\"mainLogo\"/>\n      <div id=\"loginDiv\">\n        <h1>Sign In</h1>\n        <img src={googleSigninImage} onClick={handleLogin} id=\"googleLogin\"/>\n      </div>\n      \n    </div>\n  )\n  \n  \n};\n\n\n\n\n\n\nexport function LogInPage(){\n\n}"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,aAAa,KAAQ,cAAc,CAC5C,OAASC,OAAO,CAAEC,eAAe,CAAEC,kBAAkB,KAAQ,eAAe,CAC5E,MAAO,CAAAC,iBAAiB,KAAM,oCAAoC,CAClE,MAAO,CAAAC,QAAQ,KAAM,oCAAoC,CACzD,MAAO,gBAAgB,CACvB,MAAO,uBAAuB,CAE9B;AAAA,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBACA,MAAO,SAAS,CAAAC,iBAAiBA,CAAA,CAAE,CACjC;AACA,KAAM,CAAAC,WAAW,CAAGA,CAAA,GAAM,CACxB;AACA,KAAM,CAAAC,IAAI,CAAGX,OAAO,CAAC,CAAC,CACtB,KAAM,CAAAY,QAAQ,CAAG,GAAI,CAAAV,kBAAkB,CAAC,CAAC,CAEzC;AACAD,eAAe,CAACU,IAAI,CAAEC,QAAQ,CAAC,CAC5BC,IAAI,CAAEC,MAAM,EAAK,CAChB;AACA,KAAM,CAAAC,UAAU,CAAGb,kBAAkB,CAACc,oBAAoB,CAACF,MAAM,CAAC,CAClE,KAAM,CAAAG,KAAK,CAAGF,UAAU,CAACG,WAAW,CACpC;AACA,KAAM,CAAAC,IAAI,CAAGL,MAAM,CAACK,IAAI,CACxB;AACAC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC,CACnB,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAK,EAAK,CAChB;AACA,KAAM,CAAAC,SAAS,CAAGD,KAAK,CAACE,IAAI,CAC5B,KAAM,CAAAC,YAAY,CAAGH,KAAK,CAACI,OAAO,CAClC;AACA,KAAM,CAAAC,KAAK,CAAGL,KAAK,CAACK,KAAK,CACzB;AACA,KAAM,CAAAb,UAAU,CAAGb,kBAAkB,CAAC2B,mBAAmB,CAACN,KAAK,CAAC,CAChE;AACAH,OAAO,CAACG,KAAK,CAAC,8BAA8B,CAAEC,SAAS,CAAEE,YAAY,CAAC,CACxE,CAAC,CAAC,CACN,CAAC,CAED;AACA,mBACElB,KAAA,QAAKsB,EAAE,CAAC,SAAS,CAAAC,QAAA,eAEfzB,IAAA,QAAK0B,GAAG,CAAE5B,QAAS,CAAC0B,EAAE,CAAC,UAAU,CAAC,CAAC,cACnCtB,KAAA,QAAKsB,EAAE,CAAC,UAAU,CAAAC,QAAA,eAChBzB,IAAA,OAAAyB,QAAA,CAAI,SAAO,CAAI,CAAC,cAChBzB,IAAA,QAAK0B,GAAG,CAAE7B,iBAAkB,CAAC8B,OAAO,CAAEvB,WAAY,CAACoB,EAAE,CAAC,aAAa,CAAC,CAAC,EAClE,CAAC,EAEH,CAAC,CAIV,CAAC,CAOD,MAAO,SAAS,CAAAI,SAASA,CAAA,CAAE,CAE3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}