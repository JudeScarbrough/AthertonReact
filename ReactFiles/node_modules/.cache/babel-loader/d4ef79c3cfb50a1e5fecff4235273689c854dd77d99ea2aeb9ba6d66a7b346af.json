{"ast":null,"code":"import{initializeApp}from'firebase/app';import{getAuth}from'firebase/auth';import{getDatabase,ref,set,get,update}from'firebase/database';import'../firebase.js';// Import your Firebase configuration\n// Initialize Firebase Authentication and Database\nconst auth=getAuth();const database=getDatabase();// Function to create a user spot in the database\nfunction createUserSpot(userData){const userId=auth.currentUser.uid;// Get the current user's ID\nset(ref(database,'users/'+userId),userData).then(()=>console.log(\"User data saved successfully.\")).catch(error=>console.error(\"Error saving user data:\",error));}// Function to get or create user data from the database\nexport function getUserData(){return new Promise((resolve,reject)=>{var _auth$currentUser;const userId=(_auth$currentUser=auth.currentUser)===null||_auth$currentUser===void 0?void 0:_auth$currentUser.uid;// Safely get the current user's ID if logged in\nif(!userId){console.error(\"No user is signed in.\");reject(\"No user is signed in.\");// Reject the promise if no user is signed in\nreturn;}const userRef=ref(database,'users/'+userId);get(userRef).then(snapshot=>{if(snapshot.exists()){console.log(\"Data retrieved\");resolve(snapshot.val());// Resolve the promise with the retrieved data\n}else{var startingUserData={paid:\"No\",setup:\"No\"};createUserSpot(startingUserData);console.log(\"Data created\");resolve(startingUserData);// Resolve the promise with the new data\n}}).catch(error=>{console.error(\"Error fetching user data:\",error);reject(error);// Reject the promise if there is an error fetching the data\n});});}// Function to set or update data for the current user\n// Function to set or update data for the current user\nexport function setData(userData){var _auth$currentUser2;const userId=(_auth$currentUser2=auth.currentUser)===null||_auth$currentUser2===void 0?void 0:_auth$currentUser2.uid;// Safely get the current user's ID if logged in\nif(!userId){console.error(\"No user is signed in.\");return Promise.reject(new Error(\"No user is signed in.\"));// Return a rejected promise if no user is signed in\n}const userRef=ref(database,'users/'+userId);// Return the promise so that it can be used with .then() and .catch() outside of this function\nreturn update(userRef,userData).then(()=>{console.log(\"User data updated successfully.\");return userData;// Optionally return userData or some other result\n}).catch(error=>{console.error(\"Error updating user data:\",error);throw error;// Re-throw the error to allow handling it with .catch() outside of this function\n});}","map":{"version":3,"names":["initializeApp","getAuth","getDatabase","ref","set","get","update","auth","database","createUserSpot","userData","userId","currentUser","uid","then","console","log","catch","error","getUserData","Promise","resolve","reject","_auth$currentUser","userRef","snapshot","exists","val","startingUserData","paid","setup","setData","_auth$currentUser2","Error"],"sources":["D:/development/AthertonReact/ReactFiles/src/database/database.js"],"sourcesContent":["import { initializeApp } from 'firebase/app';\r\nimport { getAuth } from 'firebase/auth';\r\nimport { getDatabase, ref, set, get, update } from 'firebase/database';\r\nimport '../firebase.js'; // Import your Firebase configuration\r\n\r\n// Initialize Firebase Authentication and Database\r\nconst auth = getAuth();\r\nconst database = getDatabase();\r\n\r\n// Function to create a user spot in the database\r\nfunction createUserSpot(userData) {\r\n    const userId = auth.currentUser.uid; // Get the current user's ID\r\n    set(ref(database, 'users/' + userId), userData)\r\n        .then(() => console.log(\"User data saved successfully.\"))\r\n        .catch((error) => console.error(\"Error saving user data:\", error));\r\n}\r\n\r\n// Function to get or create user data from the database\r\nexport function getUserData() {\r\n    return new Promise((resolve, reject) => {\r\n        const userId = auth.currentUser?.uid; // Safely get the current user's ID if logged in\r\n        if (!userId) {\r\n            console.error(\"No user is signed in.\");\r\n            reject(\"No user is signed in.\"); // Reject the promise if no user is signed in\r\n            return;\r\n        }\r\n\r\n        const userRef = ref(database, 'users/' + userId);\r\n        get(userRef).then((snapshot) => {\r\n            if (snapshot.exists()) {\r\n                console.log(\"Data retrieved\");\r\n                resolve(snapshot.val()); // Resolve the promise with the retrieved data\r\n            } else {\r\n                var startingUserData = { paid: \"No\", setup: \"No\" };\r\n                createUserSpot(startingUserData);\r\n                console.log(\"Data created\");\r\n                resolve(startingUserData); // Resolve the promise with the new data\r\n            }\r\n        }).catch((error) => {\r\n            console.error(\"Error fetching user data:\", error);\r\n            reject(error); // Reject the promise if there is an error fetching the data\r\n        });\r\n    });\r\n}\r\n\r\n// Function to set or update data for the current user\r\n// Function to set or update data for the current user\r\nexport function setData(userData) {\r\n    const userId = auth.currentUser?.uid; // Safely get the current user's ID if logged in\r\n    if (!userId) {\r\n        console.error(\"No user is signed in.\");\r\n        return Promise.reject(new Error(\"No user is signed in.\")); // Return a rejected promise if no user is signed in\r\n    }\r\n\r\n    const userRef = ref(database, 'users/' + userId);\r\n    // Return the promise so that it can be used with .then() and .catch() outside of this function\r\n    return update(userRef, userData)\r\n        .then(() => {\r\n            console.log(\"User data updated successfully.\");\r\n            return userData; // Optionally return userData or some other result\r\n        })\r\n        .catch((error) => {\r\n            console.error(\"Error updating user data:\", error);\r\n            throw error; // Re-throw the error to allow handling it with .catch() outside of this function\r\n        });\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}