{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getDatabase, ref, set, get, update } from 'firebase/database';\nimport '../firebase.js'; // Import your Firebase configuration\n\n// Initialize Firebase Authentication and Database\nconst auth = getAuth();\nconst database = getDatabase();\n\n// Function to create a user spot in the database\nfunction createUserSpot(userData) {\n  const userId = auth.currentUser.uid; // Get the current user's ID\n  set(ref(database, 'users/' + userId), userData).then(() => console.log(\"User data saved successfully.\")).catch(error => console.error(\"Error saving user data:\", error));\n}\n\n// Function to get or create user data from the database\nexport function getUserData() {\n  return new Promise((resolve, reject) => {\n    var _auth$currentUser;\n    const userId = (_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.uid; // Safely get the current user's ID if logged in\n    if (!userId) {\n      console.error(\"No user is signed in.\");\n      reject(\"No user is signed in.\"); // Reject the promise if no user is signed in\n      return;\n    }\n    const userRef = ref(database, 'users/' + userId);\n    get(userRef).then(snapshot => {\n      if (snapshot.exists()) {\n        console.log(\"Data retrieved\");\n        resolve(snapshot.val()); // Resolve the promise with the retrieved data\n      } else {\n        var startingUserData = {\n          paid: \"No\",\n          setup: \"No\"\n        };\n        createUserSpot(startingUserData);\n        console.log(\"Data created\");\n        resolve(startingUserData); // Resolve the promise with the new data\n      }\n    }).catch(error => {\n      console.error(\"Error fetching user data:\", error);\n      reject(error); // Reject the promise if there is an error fetching the data\n    });\n  });\n}\n\n// Function to set or update data for the current user\n// Function to set or update data for the current user\nexport function setData(userData) {\n  var _auth$currentUser2;\n  const userId = (_auth$currentUser2 = auth.currentUser) === null || _auth$currentUser2 === void 0 ? void 0 : _auth$currentUser2.uid; // Safely get the current user's ID if logged in\n  if (!userId) {\n    console.error(\"No user is signed in.\");\n    return Promise.reject(new Error(\"No user is signed in.\")); // Return a rejected promise if no user is signed in\n  }\n  const userRef = ref(database, 'users/' + userId);\n  // Return the promise so that it can be used with .then() and .catch() outside of this function\n  return update(userRef, userData).then(() => {\n    console.log(\"User data updated successfully.\");\n    return userData; // Optionally return userData or some other result\n  }).catch(error => {\n    console.error(\"Error updating user data:\", error);\n    throw error; // Re-throw the error to allow handling it with .catch() outside of this function\n  });\n}","map":{"version":3,"names":["initializeApp","getAuth","getDatabase","ref","set","get","update","auth","database","createUserSpot","userData","userId","currentUser","uid","then","console","log","catch","error","getUserData","Promise","resolve","reject","_auth$currentUser","userRef","snapshot","exists","val","startingUserData","paid","setup","setData","_auth$currentUser2","Error"],"sources":["D:/development/AthertonReact/ReactFiles/src/database/database.js"],"sourcesContent":["import { initializeApp } from 'firebase/app';\r\nimport { getAuth } from 'firebase/auth';\r\nimport { getDatabase, ref, set, get, update } from 'firebase/database';\r\nimport '../firebase.js'; // Import your Firebase configuration\r\n\r\n// Initialize Firebase Authentication and Database\r\nconst auth = getAuth();\r\nconst database = getDatabase();\r\n\r\n// Function to create a user spot in the database\r\nfunction createUserSpot(userData) {\r\n    const userId = auth.currentUser.uid; // Get the current user's ID\r\n    set(ref(database, 'users/' + userId), userData)\r\n        .then(() => console.log(\"User data saved successfully.\"))\r\n        .catch((error) => console.error(\"Error saving user data:\", error));\r\n}\r\n\r\n// Function to get or create user data from the database\r\nexport function getUserData() {\r\n    return new Promise((resolve, reject) => {\r\n        const userId = auth.currentUser?.uid; // Safely get the current user's ID if logged in\r\n        if (!userId) {\r\n            console.error(\"No user is signed in.\");\r\n            reject(\"No user is signed in.\"); // Reject the promise if no user is signed in\r\n            return;\r\n        }\r\n\r\n        const userRef = ref(database, 'users/' + userId);\r\n        get(userRef).then((snapshot) => {\r\n            if (snapshot.exists()) {\r\n                console.log(\"Data retrieved\");\r\n                resolve(snapshot.val()); // Resolve the promise with the retrieved data\r\n            } else {\r\n                var startingUserData = { paid: \"No\", setup: \"No\" };\r\n                createUserSpot(startingUserData);\r\n                console.log(\"Data created\");\r\n                resolve(startingUserData); // Resolve the promise with the new data\r\n            }\r\n        }).catch((error) => {\r\n            console.error(\"Error fetching user data:\", error);\r\n            reject(error); // Reject the promise if there is an error fetching the data\r\n        });\r\n    });\r\n}\r\n\r\n// Function to set or update data for the current user\r\n// Function to set or update data for the current user\r\nexport function setData(userData) {\r\n    const userId = auth.currentUser?.uid; // Safely get the current user's ID if logged in\r\n    if (!userId) {\r\n        console.error(\"No user is signed in.\");\r\n        return Promise.reject(new Error(\"No user is signed in.\")); // Return a rejected promise if no user is signed in\r\n    }\r\n\r\n    const userRef = ref(database, 'users/' + userId);\r\n    // Return the promise so that it can be used with .then() and .catch() outside of this function\r\n    return update(userRef, userData)\r\n        .then(() => {\r\n            console.log(\"User data updated successfully.\");\r\n            return userData; // Optionally return userData or some other result\r\n        })\r\n        .catch((error) => {\r\n            console.error(\"Error updating user data:\", error);\r\n            throw error; // Re-throw the error to allow handling it with .catch() outside of this function\r\n        });\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}