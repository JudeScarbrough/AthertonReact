{"ast":null,"code":"import{useState,useEffect}from'react';import{getAuth,onAuthStateChanged}from'firebase/auth';import'./firebase.js';import{RenderDashboard}from'./dashboard/dashboard.js';import{getUserData}from'./database/database.js';import{GoogleLoginButton}from'./setup/login.js';import{SettingsForm}from'./setup/settings.js';import'normalize.css';import{getServerIp}from'./config.js';import{Fragment as _Fragment,jsx as _jsx}from\"react/jsx-runtime\";const auth=getAuth();export default function App(props){const[isSignedIn,setSignIn]=useState(null);const[user,setUser]=useState(null);const[userData,setUserData]=useState(null);const[userDataFetched,setUserDataFetched]=useState(false);const[loading,setLoading]=useState(true);const[settingsDone,setSettingsDone]=useState(false);useEffect(()=>{const unsubscribe=onAuthStateChanged(auth,user=>{if(user){setUser(user);if(!isSignedIn){setSignIn(true);}}else{setSignIn(false);}setLoading(false);});return()=>unsubscribe();},[isSignedIn]);useEffect(()=>{if(isSignedIn&&!userDataFetched){fetchUserData();}},[isSignedIn,userDataFetched]);const fetchUserData=()=>{getUserData().then(data=>{if(!(JSON.stringify(userData)===JSON.stringify(data))){setUserData(data);}setUserDataFetched(true);}).catch(error=>{console.error(\"Failed to get user data:\",error);});};const handleSubscription=async()=>{const response=await fetch('https://'+getServerIp()+'/create-checkout-session',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email:user.email,user_id:user.uid})});const session=await response.json();if(response.ok){window.location.href=session.url;}else{console.error('Failed to create checkout session:',session);}};const checkPayerByEmail=async()=>{let email=user.email;let userId=user.uid;if(!email||!userId){console.log('Email and User ID are required');return;}try{console.log(\"trying\");const url=\"https://\".concat(getServerIp(),\"/check-payer-by-email?email=\").concat(encodeURIComponent(email),\"&user_id=\").concat(userId);const response=await fetch(url);const data=await response.json();if(response.ok){if(data.is_paying){// user is paid\nuserData.paid=\"Yes\";}else{handleSubscription();setSettingsDone(false);}}else{console.error(data.error||'Error occurred while checking payer status');}}catch(error){console.error('Failed to fetch payer status:',error);}};const handleUserPaymentStatus=async()=>{console.log(\"handle payment status\");if(!userData){console.log('User data is not available yet.');return;}const lastCheckedTime=localStorage.getItem('lastPaymentCheckTime');const currentTime=new Date().getTime();// Check if it has been less than an hour since the last check\nif('paid'in userData){if(userData.setup==\"Yes\"&&userData.paid==\"Yes\"){if(lastCheckedTime&&currentTime-lastCheckedTime<1){// Fixed time comparison\nconsole.log('Checked less than an hour ago.');return;}}}// Update the last checked time\nlocalStorage.setItem('lastPaymentCheckTime',currentTime);await checkPayerByEmail();// Always check payer status\nawait fetchUserData();// Always refresh user data\n// Check updated payment status and take action\nif(userData.paid===\"No\"){checkPayerByEmail();}};// Add this effect to check payment status whenever user data is fetched or updated\nuseEffect(()=>{if(isSignedIn&&userDataFetched&&userData){if(!userData.setup){// bypass\n}else if(userData.setup==\"Yes\"&&userData.paid==\"Yes\"){handleUserPaymentStatus();}}},[userData]);// React on userData updates\nif(userData){if('paid'in userData){if(userData.setup==\"Yes\"&&userData.paid==\"No\"){console.log(\"handle payment status\");handleUserPaymentStatus();return/*#__PURE__*/_jsx(_Fragment,{});}}}const finishedInitSettings=()=>{handleSubscription();setSettingsDone(true);};if(settingsDone){return;}if(loading){return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});}if(isSignedIn){if(userData&&userData[\"setup\"]===\"No\"&&userDataFetched){return/*#__PURE__*/_jsx(SettingsForm,{changeUserDataState:setUserData,userData:userData,finishedInitSettings:finishedInitSettings});}else if(userData&&userData[\"setup\"]===\"Yes\"&&userDataFetched){return/*#__PURE__*/_jsx(RenderDashboard,{userData:userData,changeUserDataState:setUserData,user:user,route:props.route});}}else{return/*#__PURE__*/_jsx(GoogleLoginButton,{});}}","map":{"version":3,"names":["useState","useEffect","getAuth","onAuthStateChanged","RenderDashboard","getUserData","GoogleLoginButton","SettingsForm","getServerIp","Fragment","_Fragment","jsx","_jsx","auth","App","props","isSignedIn","setSignIn","user","setUser","userData","setUserData","userDataFetched","setUserDataFetched","loading","setLoading","settingsDone","setSettingsDone","unsubscribe","fetchUserData","then","data","JSON","stringify","catch","error","console","handleSubscription","response","fetch","method","headers","body","email","user_id","uid","session","json","ok","window","location","href","url","checkPayerByEmail","userId","log","concat","encodeURIComponent","is_paying","paid","handleUserPaymentStatus","lastCheckedTime","localStorage","getItem","currentTime","Date","getTime","setup","setItem","finishedInitSettings","children","changeUserDataState","route"],"sources":["D:/development/AthertonReact/ReactFiles/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { getAuth, onAuthStateChanged } from 'firebase/auth';\r\nimport './firebase.js';\r\nimport { RenderDashboard } from './dashboard/dashboard.js';\r\nimport { getUserData } from './database/database.js';\r\nimport { GoogleLoginButton } from './setup/login.js';\r\nimport { SettingsForm } from './setup/settings.js';\r\nimport 'normalize.css';\r\nimport { getServerIp } from './config.js';\r\n\r\nconst auth = getAuth();\r\nexport default function App(props) {\r\n  const [isSignedIn, setSignIn] = useState(null);\r\n  const [user, setUser] = useState(null); \r\n  const [userData, setUserData] = useState(null);\r\n  const [userDataFetched, setUserDataFetched] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [settingsDone, setSettingsDone] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, user => {\r\n      if (user) {\r\n        setUser(user); \r\n        if (!isSignedIn) { \r\n          setSignIn(true);\r\n        }\r\n      } else {\r\n        setSignIn(false);\r\n      }\r\n      setLoading(false); \r\n    });\r\n\r\n    return () => unsubscribe(); \r\n  }, [isSignedIn]);\r\n\r\n  useEffect(() => {\r\n    if (isSignedIn && !userDataFetched) {\r\n      fetchUserData();\r\n    }\r\n  }, [isSignedIn, userDataFetched]);\r\n\r\n  const fetchUserData = () => {\r\n    getUserData().then(data => {\r\n      if (!(JSON.stringify(userData) === JSON.stringify(data))) {\r\n        setUserData(data);\r\n      }\r\n      setUserDataFetched(true);\r\n    }).catch(error => {\r\n      console.error(\"Failed to get user data:\", error);\r\n    });\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const handleSubscription = async () => {\r\n      const response = await fetch(('https://' + getServerIp() + '/create-checkout-session'), {\r\n          method: 'POST',\r\n          headers: {\r\n              'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ email: user.email, user_id: user.uid })\r\n      });\r\n      const session = await response.json();\r\n      if (response.ok) {\r\n          window.location.href = session.url;\r\n      } else {\r\n          console.error('Failed to create checkout session:', session);\r\n      }\r\n  };\r\n  \r\n  \r\n  const checkPayerByEmail = async () => {\r\n  \r\n    let email = user.email\r\n    let userId = user.uid\r\n  \r\n    if (!email || !userId) {\r\n      console.log('Email and User ID are required');\r\n      return; \r\n    }\r\n  \r\n    try {\r\n      console.log(\"trying\")\r\n\r\n      const url = `https://${getServerIp()}/check-payer-by-email?email=${encodeURIComponent(email)}&user_id=${userId}`;\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n  \r\n      \r\n      if (response.ok) {\r\n        if (data.is_paying) {\r\n          // user is paid\r\n          userData.paid = \"Yes\"\r\n        } else {\r\n          handleSubscription()\r\n          setSettingsDone(false)\r\n        }\r\n      } else {\r\n        console.error(data.error || 'Error occurred while checking payer status');\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to fetch payer status:', error);\r\n    }\r\n  };\r\n\r\n \r\n  \r\n\r\n  \r\n  const handleUserPaymentStatus = async () => {\r\n    console.log(\"handle payment status\")\r\n    if (!userData) {\r\n      console.log('User data is not available yet.');\r\n      return;\r\n    }\r\n  \r\n    const lastCheckedTime = localStorage.getItem('lastPaymentCheckTime');\r\n    const currentTime = new Date().getTime();\r\n  \r\n    // Check if it has been less than an hour since the last check\r\n    if ('paid' in userData) {\r\n      if (userData.setup == \"Yes\" && userData.paid == \"Yes\") {\r\n        if (lastCheckedTime && (currentTime - lastCheckedTime < 1)) {  // Fixed time comparison\r\n          console.log('Checked less than an hour ago.');\r\n          return;\r\n        }\r\n\r\n\r\n      \r\n    }\r\n  }\r\n    \r\n  \r\n    // Update the last checked time\r\n    localStorage.setItem('lastPaymentCheckTime', currentTime);\r\n  \r\n    await checkPayerByEmail();  // Always check payer status\r\n    await fetchUserData();  // Always refresh user data\r\n  \r\n    // Check updated payment status and take action\r\n    if (userData.paid === \"No\") {\r\n      checkPayerByEmail();\r\n    }\r\n  };\r\n  \r\n  // Add this effect to check payment status whenever user data is fetched or updated\r\n  useEffect(() => {\r\n    if (isSignedIn && userDataFetched && userData) {\r\n      if (!userData.setup){\r\n        // bypass\r\n      } else if (userData.setup == \"Yes\" && userData.paid == \"Yes\"){\r\n        handleUserPaymentStatus();\r\n      }\r\n    \r\n    }\r\n  }, [userData]);  // React on userData updates\r\n  \r\n\r\n  if (userData) {\r\n      if ('paid' in userData) {\r\n        if (userData.setup == \"Yes\" && userData.paid == \"No\") {\r\n        console.log(\"handle payment status\")\r\n        handleUserPaymentStatus();\r\n\r\n\r\n        return <></>\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\nconst finishedInitSettings = () => {\r\n  handleSubscription()\r\n  setSettingsDone(true)\r\n}\r\n\r\n\r\nif (settingsDone){\r\n  return;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  if (isSignedIn) {\r\n    if (userData && userData[\"setup\"] === \"No\" && userDataFetched) {\r\n      return <SettingsForm changeUserDataState={setUserData} userData={userData} finishedInitSettings={finishedInitSettings}/>;\r\n    } else if (userData && userData[\"setup\"] === \"Yes\" && userDataFetched) {\r\n      return <RenderDashboard userData={userData} changeUserDataState={setUserData} user={user} route={props.route}/>;\r\n    }\r\n  } else {\r\n    return <GoogleLoginButton />;\r\n  }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}