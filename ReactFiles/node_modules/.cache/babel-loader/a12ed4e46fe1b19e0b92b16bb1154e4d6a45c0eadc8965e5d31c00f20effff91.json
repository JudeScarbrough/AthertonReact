{"ast":null,"code":"var _jsxFileName = \"/Users/jscarbrough/Desktop/AthertonReact/src/dashboard/subApps/cm/cm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport \"../../../cssFiles/cm.css\";\nimport { UserBlock } from './userBlock/userBlock.js';\nimport { AddUser } from './addUser.js';\nimport { getUserData, setData } from '../../../database/database.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function ClientManager(props) {\n  _s();\n  const [userData, setUserData] = useState(props.userData);\n  const [refreshKey, setRefreshKey] = useState(0); // State to trigger useEffect\n  const [forceClose, setForceClose] = useState(false);\n  useEffect(() => {\n    // Fetch the latest user data\n    getUserData().then(fetchedData => {\n      // Check if the fetched data is different from the current state\n      if (JSON.stringify(fetchedData) !== JSON.stringify(userData)) {\n        // Update state if the data is different\n        setUserData(fetchedData);\n      }\n    });\n  }, [refreshKey]); // Depend on refreshKey to re-fetch user data\n\n  const updateUserData = newUserData => {\n    setUserData(newUserData); // Update the state\n    setData(newUserData); // Call setData to update the database\n    setRefreshKey(prevKey => prevKey + 1); // Increment refreshKey to trigger useEffect\n  };\n  const forceCloseEdit = () => {\n    setForceClose(!forceClose);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AddUser, {\n      userData: userData,\n      updateUserData: updateUserData,\n      forceCloseEdit: forceCloseEdit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(UserBlock, {\n      userData: userData,\n      updateUserData: updateUserData,\n      forceCloseEdit: forceCloseEdit,\n      forceClose: forceClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(ClientManager, \"1ZImfLJxI3PxrQkaSft+ZtFQ4B8=\");\n_c = ClientManager;\nvar _c;\n$RefreshReg$(_c, \"ClientManager\");","map":{"version":3,"names":["React","useState","useEffect","UserBlock","AddUser","getUserData","setData","jsxDEV","_jsxDEV","Fragment","_Fragment","ClientManager","props","_s","userData","setUserData","refreshKey","setRefreshKey","forceClose","setForceClose","then","fetchedData","JSON","stringify","updateUserData","newUserData","prevKey","forceCloseEdit","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jscarbrough/Desktop/AthertonReact/src/dashboard/subApps/cm/cm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport \"../../../cssFiles/cm.css\";\nimport { UserBlock } from './userBlock/userBlock.js';\nimport { AddUser } from './addUser.js';\nimport { getUserData, setData } from '../../../database/database.js';\n\nexport function ClientManager(props) {\n    const [userData, setUserData] = useState(props.userData);\n    const [refreshKey, setRefreshKey] = useState(0); // State to trigger useEffect\n    const [forceClose, setForceClose] = useState(false)\n\n    useEffect(() => {\n        // Fetch the latest user data\n        getUserData().then(fetchedData => {\n            // Check if the fetched data is different from the current state\n            if (JSON.stringify(fetchedData) !== JSON.stringify(userData)) {\n                // Update state if the data is different\n                setUserData(fetchedData);\n            }\n        });\n    }, [refreshKey]); // Depend on refreshKey to re-fetch user data\n\n    const updateUserData = (newUserData) => {\n        setUserData(newUserData); // Update the state\n        setData(newUserData); // Call setData to update the database\n        setRefreshKey(prevKey => prevKey + 1); // Increment refreshKey to trigger useEffect\n    };\n\n\n\n    const forceCloseEdit = () => {\n        setForceClose(!forceClose)\n    }\n\n\n\n\n    return (\n        <>\n            <AddUser userData={userData} updateUserData={updateUserData} forceCloseEdit={forceCloseEdit}/>\n            <UserBlock userData={userData} updateUserData={updateUserData} forceCloseEdit={forceCloseEdit} forceClose={forceClose}/>\n        </>\n    );\n}\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,0BAA0B;AACjC,SAASC,SAAS,QAAQ,0BAA0B;AACpD,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,WAAW,EAAEC,OAAO,QAAQ,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAErE,OAAO,SAASC,aAAaA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACjC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAACW,KAAK,CAACE,QAAQ,CAAC;EACxD,MAAM,CAACE,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACjD,MAAM,CAACiB,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAEnDC,SAAS,CAAC,MAAM;IACZ;IACAG,WAAW,CAAC,CAAC,CAACe,IAAI,CAACC,WAAW,IAAI;MAC9B;MACA,IAAIC,IAAI,CAACC,SAAS,CAACF,WAAW,CAAC,KAAKC,IAAI,CAACC,SAAS,CAACT,QAAQ,CAAC,EAAE;QAC1D;QACAC,WAAW,CAACM,WAAW,CAAC;MAC5B;IACJ,CAAC,CAAC;EACN,CAAC,EAAE,CAACL,UAAU,CAAC,CAAC,CAAC,CAAC;;EAElB,MAAMQ,cAAc,GAAIC,WAAW,IAAK;IACpCV,WAAW,CAACU,WAAW,CAAC,CAAC,CAAC;IAC1BnB,OAAO,CAACmB,WAAW,CAAC,CAAC,CAAC;IACtBR,aAAa,CAACS,OAAO,IAAIA,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;EAC3C,CAAC;EAID,MAAMC,cAAc,GAAGA,CAAA,KAAM;IACzBR,aAAa,CAAC,CAACD,UAAU,CAAC;EAC9B,CAAC;EAKD,oBACIV,OAAA,CAAAE,SAAA;IAAAkB,QAAA,gBACIpB,OAAA,CAACJ,OAAO;MAACU,QAAQ,EAAEA,QAAS;MAACU,cAAc,EAAEA,cAAe;MAACG,cAAc,EAAEA;IAAe;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAC9FxB,OAAA,CAACL,SAAS;MAACW,QAAQ,EAAEA,QAAS;MAACU,cAAc,EAAEA,cAAe;MAACG,cAAc,EAAEA,cAAe;MAACT,UAAU,EAAEA;IAAW;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA,eAC1H,CAAC;AAEX;AAACnB,EAAA,CArCeF,aAAa;AAAAsB,EAAA,GAAbtB,aAAa;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}